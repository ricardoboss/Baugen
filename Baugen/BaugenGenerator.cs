using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Baugen;

[Generator]
public class BaugenGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var rootNamespaceProvider = context.AnalyzerConfigOptionsProvider.Select((o, _) =>
        {
            o.GlobalOptions.TryGetValue("build_property.RootNamespacce", out var rootNamespace);

            return rootNamespace;
        });

        var combined = rootNamespaceProvider.Combine(context.CompilationProvider);

        context.RegisterSourceOutput(combined, Generate);
    }

    private static void Generate(SourceProductionContext context, (string?, Compilation) node)
    {
        var (rootNamespace, compilation) = node;

        var timestamp = DateTimeOffset.UtcNow;
        var @namespace = rootNamespace ?? compilation.AssemblyName ?? "Baugen";
        const string className = "BuildMetadata";
        var source = GenerateSource(className, timestamp, @namespace);

        context.AddSource($"{className}.g.cs", source);
    }

    private static SourceText GenerateSource(string className, DateTimeOffset timestamp, string @namespace)
    {
        var buffer = new StringWriter();
        var b = new IndentedTextWriter(buffer, "\t");

        b.WriteLine("/// <auto-generated/>");
        b.WriteLine();
        b.WriteLine($"namespace {@namespace};");
        b.WriteLine();
        b.WriteLine("/// <summary>");
        b.WriteLine("/// Contains build metadata about the current assembly.");
        b.WriteLine("/// </summary>");
        b.WriteLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Baugen\", null)]");
        b.WriteLine("[global::System.Diagnostics.DebuggerNonUserCode]");
        b.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        b.WriteLine($"internal static partial class {className}");
        b.WriteLine("{");
        b.Indent++;
        b.WriteLine("/// <summary>");
        b.WriteLine("/// The build timestamp (UTC) of the current assembly in ticks.");
        b.WriteLine("/// </summary>");
        b.WriteLine($"public const long BuildTimestampTicks = {timestamp.Ticks}L;");
        b.WriteLineNoTabs("");
        b.WriteLine("/// <summary>");
        b.WriteLine("/// The build timestamp (UTC) of the current assembly.");
        b.WriteLine("/// </summary>");
        b.WriteLine("public static DateTimeOffset BuildTimestamp { get; } = new DateTimeOffset(BuildTimestampTicks, TimeSpan.Zero);");
        b.Indent--;
        b.WriteLine("}");

        return SourceText.From(buffer.ToString(), Encoding.UTF8);
    }
}
